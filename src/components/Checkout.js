import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import './Checkout.css';

function Checkout() {
  const location = useLocation();
  const navigate = useNavigate();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { products, totalQuantity, totalAmount } = location.state || {};

  const [formData, setFormData] = useState({
    email: '',
    fullName: '',
    phone: '',
    address: '',
    province: '',
    district: '',
    ward: '',
    note: ''
  });

  const [formErrors, setFormErrors] = useState({});
  const [paymentMethod, setPaymentMethod] = useState('');

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng, chuy·ªÉn v·ªÅ trang gi·ªè h√†ng
  useEffect(() => {
    if (!products || products.length === 0) {
      navigate('/cart');
    }
  }, [products, navigate]);

  // H√†m validate form
  const validateForm = () => {
    const errors = {};

    if (!formData.email) {
      errors.email = 'Vui l√≤ng nh·∫≠p email';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.fullName) {
      errors.fullName = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
    }

    if (!paymentMethod) {
      errors.payment = 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n';
    }

    return errors;
  };

  // H√†m x·ª≠ l√Ω g·ª≠i form ƒë·∫∑t h√†ng
  const handleSubmit = async (e) => {
    e.preventDefault();

    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    const confirmed = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t h√†ng?');
    if (!confirmed) return;

    setIsSubmitting(true);

    try {
      // Gi·∫£ l·∫≠p API call
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // T·∫°o th√¥ng tin ƒë∆°n h√†ng
      const orderData = {
        orderId: `#${Math.floor(Math.random() * 10000)}`,
        email: formData.email,
        fullName: formData.fullName,
        phone: formData.phone,
        paymentMethod,
        products: products.map((product) => ({
          id: product.id,
          name: product.name,
          quantity: product.quantity,
          price: product.salePrice,
        })),
        totalQuantity,
        totalAmount,
      };

      // L∆∞u ƒë∆°n h√†ng v√†o localStorage
      const orders = JSON.parse(localStorage.getItem('orders') || '[]');
      orders.push(orderData);
      localStorage.setItem('orders', JSON.stringify(orders));

      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x√°c nh·∫≠n th√†nh c√¥ng
      navigate('/order-success', { state: { orderData } });
    } catch (error) {
      console.error('Error:', error);
      alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
    } finally {
      setIsSubmitting(false);
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu trong form
  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    if (formErrors[name]) {
      setFormErrors((prev) => ({
        ...prev,
        [name]: '',
      }));
    }
  };

  // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng, hi·ªÉn th·ªã th√¥ng b√°o chuy·ªÉn h∆∞·ªõng
  if (!products) {
    return <div className="loading">ƒêang chuy·ªÉn h∆∞·ªõng...</div>;
  }

  return (
    <div className="checkout-container">
      <div className="checkout-left">
        <h2>Laptop.vn</h2>

        <div className="checkout-section">
          <div className="section-header">
            <h3>Th√¥ng tin nh·∫≠n h√†ng</h3>
            <button className="login-button">ƒêƒÉng nh·∫≠p</button>
          </div>

          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <input
                type="email"
                name="email"
                placeholder="Email"
                value={formData.email}
                onChange={handleFormChange}
                className={formErrors.email ? 'error' : ''}
              />
              {formErrors.email && (
                <span className="error-message">{formErrors.email}</span>
              )}
            </div>

            <div className="form-group">
              <input
                type="text"
                name="fullName"
                placeholder="H·ªç v√† t√™n"
                value={formData.fullName}
                onChange={handleFormChange}
                className={formErrors.fullName ? 'error' : ''}
              />
              {formErrors.fullName && (
                <span className="error-message">{formErrors.fullName}</span>
              )}
            </div>

            <div className="phone-input">
              <select className="country-select">
                <option value="VN">üáªüá≥ +84</option>
              </select>
              <input
                type="tel"
                name="phone"
                placeholder="S·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)"
                value={formData.phone}
                onChange={handleFormChange}
              />
            </div>

            <input
              type="text"
              name="address"
              placeholder="ƒê·ªãa ch·ªâ (t√πy ch·ªçn)"
              value={formData.address}
              onChange={handleFormChange}
            />

            <select
              name="province"
              value={formData.province}
              onChange={handleFormChange}
            >
              <option value="">T·ªânh th√†nh</option>
              <option value="H√† N·ªôi">H√† N·ªôi</option>
              <option value="ƒê√† N·∫µng">Vƒ©nh Ph√∫c</option>
              <option value="ƒê√† N·∫µng">B·∫Øc Ninh</option>
              <option value="ƒê√† N·∫µng">Qu·∫£ng Ninh</option>
              <option value="ƒê√† N·∫µng">H·∫£i D∆∞∆°ng</option>
              <option value="ƒê√† N·∫µng">H·∫£i Ph√≤ng</option>
              <option value="ƒê√† N·∫µng">H∆∞ng Y√™n</option>
              <option value="ƒê√† N·∫µng">Th√°i B√¨nh</option>
              <option value="ƒê√† N·∫µng">H√† Nam</option>
              <option value="ƒê√† N·∫µng">Nam ƒê·ªãnh</option>
              <option value="ƒê√† N·∫µng">Ninh B√¨nh</option>
              <option value="ƒê√† N·∫µng">H√† Giang</option>
              <option value="ƒê√† N·∫µng">Cao B·∫±ng</option>
              <option value="ƒê√† N·∫µng">B·∫Øc K·∫°n</option>
              <option value="ƒê√† N·∫µng">Tuy√™n Quang</option>
              <option value="ƒê√† N·∫µng">L√†o Cai</option>
              <option value="ƒê√† N·∫µng">Y√™n B√°i</option>
              <option value="ƒê√† N·∫µng">Th√°i Nguy√™n</option>
              <option value="ƒê√† N·∫µng">L·∫°ng S∆°n</option>
              <option value="ƒê√† N·∫µng">B·∫Øc Giang</option>
              <option value="ƒê√† N·∫µng">Ph√∫ Th·ªç</option>
              <option value="ƒê√† N·∫µng">ƒêi·ªán Bi√™n</option>
              <option value="ƒê√† N·∫µng">Lai Ch√¢u</option>
              <option value="ƒê√† N·∫µng">S∆°n La</option>
              <option value="ƒê√† N·∫µng">H√≤a Binh</option>
              <option value="ƒê√† N·∫µng">Thanh H√≥a</option>
              <option value="ƒê√† N·∫µng">Ngh·ªá An</option>
              <option value="ƒê√† N·∫µng">H√† Tƒ©nh</option>
              <option value="ƒê√† N·∫µng">Qu·∫£ng B√¨nh</option>
              <option value="ƒê√† N·∫µng">Qu·∫£ng Tr·ªã</option>
              <option value="ƒê√† N·∫µng">Th·ª´a Thi√™n Hu·∫ø</option>
              <option value="ƒê√† N·∫µng">ƒê√† N·∫µng</option>
              <option value="ƒê√† N·∫µng">Qu·∫£ng Nam</option>
              <option value="ƒê√† N·∫µng">Qu·∫£ng Ng√£i</option>
              <option value="ƒê√† N·∫µng">B√¨nh ƒê·ªãnh</option>
              <option value="ƒê√† N·∫µng">Ph√∫ Y√™n</option>
              <option value="ƒê√† N·∫µng">Kh√°ng H√≤a</option>
              <option value="ƒê√† N·∫µng">Ninh Thu·∫≠n</option>
              <option value="ƒê√† N·∫µng">T√¢y Nguy√™n</option>
              <option value="ƒê√† N·∫µng">Kon Tum</option>
              <option value="ƒê√† N·∫µng">Gia Lai</option>
              <option value="ƒê√† N·∫µng">ƒê·∫Øk L√•k</option>
              <option value="ƒê√† N·∫µng">ƒê·∫Øk N√¥ng</option>
              <option value="ƒê√† N·∫µng">L√¢m ƒê·ªìng</option>
              <option value="ƒê√† N·∫µng">B√¨nh Ph∆∞·ªõc</option>
              <option value="ƒê√† N·∫µng">T√¢y Ninh</option>
              <option value="ƒê√† N·∫µng">B√¨nh D∆∞∆°ng</option>
              <option value="ƒê√† N·∫µng">ƒê·ªìng Nai</option>
              <option value="ƒê√† N·∫µng">B√† R·ªãa-V√πng T√†u</option>
              <option value="ƒê√† N·∫µng">TP.H·ªì Ch√≠ Minh</option>
              <option value="ƒê√† N·∫µng">Long An</option>
              <option value="ƒê√† N·∫µng">Ti·ªÅn Giang</option>
              <option value="ƒê√† N·∫µng">B·∫øn Tre</option>
              <option value="ƒê√† N·∫µng">Tr√† Vinh</option>
              <option value="ƒê√† N·∫µng">Vinh Long</option>
              <option value="ƒê√† N·∫µng">ƒê·ªìng Th√°p</option>
              <option value="ƒê√† N·∫µng">An Giang</option>
              <option value="ƒê√† N·∫µng">Ki√™n Giang</option>
              <option value="ƒê√† N·∫µng">C·∫ßn Th∆°</option>
              <option value="ƒê√† N·∫µng">H·∫≠u Giang</option>
              <option value="ƒê√† N·∫µng">S√≥c TrƒÉng</option>
              <option value="ƒê√† N·∫µng">B·∫°c Li√™u</option>
              <option value="ƒê√† N·∫µng">C√† Mau</option>
            </select>

            <select
              name="district"
              value={formData.district}
              onChange={handleFormChange}
            >
              <option value="">Qu·∫≠n huy·ªán (t√πy ch·ªçn)</option>
            </select>

            <select
              name="ward"
              value={formData.ward}
              onChange={handleFormChange}
            >
              <option value="">Ph∆∞·ªùng x√£ (t√πy ch·ªçn)</option>
            </select>

            <textarea
              name="note"
              placeholder="Ghi ch√∫ (t√πy ch·ªçn)"
              value={formData.note}
              onChange={handleFormChange}
            />

            <div className="payment-section">
              <h3>Thanh to√°n</h3>
              <div className="payment-methods">
                <label className="payment-method">
                  <input
                    type="radio"
                    name="payment"
                    value="bank"
                    checked={paymentMethod === 'bank'}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                  />
                  <span>Chuy·ªÉn kho·∫£n</span>
                </label>

                <label className="payment-method">
                  <input
                    type="radio"
                    name="payment"
                    value="cod"
                    checked={paymentMethod === 'cod'}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                  />
                  <span>Thu h·ªô (COD)</span>
                </label>
                {formErrors.payment && (
                  <span className="error-message">{formErrors.payment}</span>
                )}
              </div>
            </div>

            <div className="checkout-actions">
              <button
                type="submit"
                className="order-button"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'ƒêANG X·ª¨ L√ù...' : 'ƒê·∫∂T H√ÄNG'}
              </button>
            </div>
          </form>
        </div>
      </div>

      <div className="checkout-right">
        <h3>ƒê∆°n h√†ng ({totalQuantity} s·∫£n ph·∫©m)</h3>

        <div className="order-items">
          {products.map((product, index) => (
            <div key={index} className="order-item">
              <div className="product-info">
                <span className="quantity-badge">{product.quantity}</span>
                <img
                  src={product.image}
                  alt={product.name}
                  className="product-image"
                />
                <div>
                  <p className="product-name">{product.name}</p>
                </div>
              </div>
              <div className="product-price">
                {(product.salePrice * product.quantity).toLocaleString()}ƒë
              </div>
            </div>
          ))}
        </div>

        <div className="price-summary">
          <div className="price-row">
            <span>T·∫°m t√≠nh</span>
            <span>{totalAmount.toLocaleString()}ƒë</span>
          </div>
          <div className="price-row total">
            <span>T·ªïng c·ªông</span>
            <span>{totalAmount.toLocaleString()}ƒë</span>
          </div>
        </div>

        <div className="checkout-actions">
          <a href="/cart" className="back-link">
            ‚Üê Quay v·ªÅ gi·ªè h√†ng
          </a>
        </div>
      </div>
    </div>
  );
}

export default Checkout;
